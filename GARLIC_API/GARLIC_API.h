/*------------------------------------------------------------------------------

	"GARLIC_API.h" : cabeceras de funciones del API (Application Program
					Interface) del sistema operativo GARLIC 1.0 (c칩digo fuente
					disponible en "GARLIC_API.s")

------------------------------------------------------------------------------*/
#ifndef _GARLIC_API_h_
#define _GARLIC_API_h_

// Definici蚤 de la estructura GARLIC_FILE
typedef struct {
    void *fileHandle;    // Puntero al manejador de archivo del sistema
    char mode;            // Modo de apertura 
} GARLIC_FILE;


	/* GARLIC_pid: devuelve el identificador del proceso actual */
extern int GARLIC_pid();


	/* GARLIC_random: devuelve un n칰mero aleatorio de 32 bits */
extern int GARLIC_random();


	/* GARLIC_divmod: calcula la divisi涌쪑 num / den (numerador / denominador),
		almacenando el cociente y el resto en las posiciones de memoria indica-
		das por *quo y *mod, respectivamente (pasa resultados por referencia);
		la funci칩n devuelve 0 si la divisi涌쪑 es correcta, o diferente de 0
		si hay alg칰n problema (divisi涌쪑 por cero).
		ATENCI涌쩵: solo procesa n涌쪐eros naturales de 32 bits SIN signo. */
extern int GARLIC_divmod(unsigned int num, unsigned int den,
							unsigned int * quo, unsigned int * mod);


	/* GARLIC_divmodL: calcula la divisi칩n num / den (numerador / denominador),
		almacenando el cociente y el resto en las posiciones de memoria indica-
		das por *quo y *mod, respectivamente; los par涌쪐etros y los resultados
		se pasan por referencia; el numerador y el cociente son de tipo
		long long (64 bits), mientras que el denominador y el resto son de tipo
		unsigned int (32 bits sin signo).
		la funci칩n devuelve 0 si la divisi칩n es correcta, o diferente de 0
		si hay alg칰n problema (divisi涌쪑 por cero). */
extern int GARLIC_divmodL(long long * num, unsigned int * den,
							long long * quo, unsigned int * mod);


	/* GARLIC_printf: escribe un string en la ventana del proceso actual,
		utilizando el string de formato 'format' que se pasa como primer
		par涌쪐etro, insertando los valores que se pasan en los siguientes
		par涌쪐etros (hasta 2) en la posici칩n y forma (tipo) que se especifique
		con los marcadores incrustados en el string de formato:
			%c	: inserta un car涌쪆ter (seg칰n c칰digo ASCII)
			%d	: inserta un natural (32 bits) en formato decimal
			%x	: inserta un natural (32 bits) en formato hexadecimal
			%s	: inserta un string
			%%	: inserta un car涌쪆ter '%' literal
		Adem涌쪕, tambi涌쪑 procesa los metacar涌쪆teres '\t' (tabulador) y '\n'
		(salto de l涌쪑ia). */
extern void GARLIC_printf(char * format, ...);

	// Define un nuevo car徑ter gr擎ico en el rango de 128 a 255
extern void GARLIC_setChar(unsigned char n, unsigned char *buffer);


extern GARLIC_FILE* GARLIC_fopen(const char *filename, const char *mode);

extern int GARLIC_fclose(GARLIC_FILE * file);

int GARLIC_fread(void * buffer, unsigned int size, unsigned int numele, GARLIC_FILE * file);

#endif // _GARLIC_API_h_
